<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 【mybatis的核心配置文件】 -->


    <!-- 加载数据库属性文件 通过XMLConfigBuilder的propertiesElement方法解析，解析后的结果存放在Configuration的variables变量里。解析顺序，先解析子节点里的属性值，再解析resource属性指定的配置文件里的值。后者会覆盖前者的值。 -->
    <properties resource="db_server.properties"></properties>

    <!--通过XMLConfigBuilder的settingsElement方法解析，解析前校验属性是否是可配置的，只要有一个不可配置，整个mybatis就会异常退出，所以配置这些属性务必小心。-->
    <settings>
        <!-- 全局性设置懒加载。如果设为‘false'，则所有相关联的都会被初始化加载 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 将积极加载改为消极加载 即按需加载 当设置为‘true'的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 开启二级缓存，默认为开启 -->
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!-- 批量设置别名(可以不配) 作用：就是在mapper.xml文件中直接写类名，也可以不用写全路径名。 -->
    <typeAliases>
        <typeAlias alias="Integer" type="java.lang.Integer" />
        <typeAlias alias="Long" type="java.lang.Long" />
        <typeAlias alias="HashMap" type="java.util.HashMap" />
        <typeAlias alias="LinkedHashMap" type="java.util.LinkedHashMap" />
        <typeAlias alias="ArrayList" type="java.util.ArrayList" />
        <typeAlias alias="LinkedList" type="java.util.LinkedList" />

        <!--如果配置可以在mapper.xml中使用user 代替完整的路径-->
        <!--<typeAlias alias="user" type="com.jiangcheng.bean.User"/>-->

        <package name="com.jiangcheng.bean.mapper" />
    </typeAliases>

    <!-- 配置mybatis的分页插件PageHelper -->
    <plugins>
        <!-- com.github.pagehelper为PageHelper类所在包名 -->
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <!-- 设置数据库类型Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库 -->
            <property name="dialect" value="mysql"/>
        </plugin>
        <plugin interceptor="com.jiangcheng.utils.mybatis.SqlLogInterceptor"></plugin>
    </plugins>

    <!--通过XMLConfigBuilder的environmentsElement方法解析，在该方法内，先判断默认是否指定了环境ID，没有的话就使用默认的环境ID吗，然后在各个环境里取ID对应的项。也就是说一个Configuration只会保存一个数据库环境，如果要配置多数据库环境的话需要创建多个Configuration对象。在改方法内先解析事务工厂、再解析数据源、然后再解析数据库环境，在解析数据库环境的过程中会访问一次数据库，以取得数据库类型信息。-->
    <!--<environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            &lt;!&ndash;dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源  &ndash;&gt;
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>-->

    <mappers>
        <!--通过OrdersMapper接口注册OrdersMapper.xml文件，必须保证：接口和xml在同一个包下，而且名字一样 OrdersMapper接口的方法名和OrdersMapper.xml文件的id一样 OrdersMapper接口的输出参数和OrdersMapper。xml文件resultType，parameterType类型一样-->
        <!--懒加载-->
        <mapper class="com.jiangcheng.mapper.OrdersMapper"/>
        <!--<mapper resource="com.jiangcheng.bean.mapper.OrdersMapper.xml"/>-->
        <!--一对多-->
        <mapper class="com.jiangcheng.mapper.UserMapper"/>
        <!--<mapper resource="com.jiangcheng.bean.mapper.UserMapper.xml"/>-->
    </mappers>
</configuration>