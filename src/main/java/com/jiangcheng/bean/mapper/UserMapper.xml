<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 	
<mapper namespace="com.jiangcheng.mapper.UserMapper">

    <!--mybatis开启缓存只需要加这样一个空标签就可以了01-->
		<!-- 开启本mapper的namespace下的二级缓存
		type:指定cache接口的实现类的类型，不写type属性，mybatis默认使用PerpetualCache
		要和ehcache整合，需要配置type为ehcache实现cache接口的类型
		-->
	<!--<cache/>-->

	<!--PerpetualCache这个类是mybatis默认实现缓存功能的类02 等同于01-->
	<!--<cache type="org.apache.ibatis.cache.impl.PerpetualCache"/>-->

	<!--mybatis 启动redis缓存 03-->
	<!--<cache type="org.mybatis.caches.redis.RedisCache"/>-->

	<!--mybatis 启用ehcache-->
    <!--
    ehcache已经配置好了,然后只需要在想要缓存的mapper配置文件里面加入以下内容,该查询语句得到的结果将会被缓存
    以下两个<cache>标签都可以,第一个可以输出日志,第二个不输出日志
    -->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache">
    &lt;!&ndash;<cache type="org.mybatis.caches.ehcache.LoggingEhcache" >&ndash;&gt;
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        &lt;!&ndash; 同ehcache参数maxElementsInMemory &ndash;&gt;
        <property name="maxEntriesLocalHeap" value="1000"/>
        &lt;!&ndash; 同ehcache参数maxElementsOnDisk &ndash;&gt;
        <property name="maxEntriesLocalDisk" value="10000000"/>
        &lt;!&ndash;
        配置这个mapper使用LRU替换策略。
        (个人比较赞同这种配置，因为每个表的数据都不一样，有一些需要经常更新，有得可能某几个字段需要经常做连接，
        使用一样的cache不太合适)
        &ndash;&gt;
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>-->

	<select id="login" parameterType="com.jiangcheng.bean.User" resultType="java.lang.Integer">
		select count(*) from t_user where username=#{username} and password=#{password}
	</select>

    <!--
    方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
                               封装联表查询的数据(去除重复的数据)
     select * from user u,orders o where u.id=o.user_id and u.id=#{id}
     -->
    <select id="selectUserAndOrdersByUserId" resultMap="getUserAndOrders">
        select u.*,o.id oid,o.number number from t_user u,t_orders o where u.id=o.user_id and u.id=#{id}
    </select>
    <resultMap type="com.jiangcheng.bean.User" id="getUserAndOrders">
        <!--id:指定查询列表唯一标识，如果有多个唯一标识，则配置多个id
            column:数据库对应的列
            property:实体类对应的属性名 -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="realname" property="realname" jdbcType="VARCHAR"/>
        <!--
            property:实体类中定义的属性名
            ofType：指定映射到集合中的全类名
          -->
        <collection property="orders" ofType="com.jiangcheng.bean.Orders">
            <id column="id" property="id" jdbcType="INTEGER"/>
            <id column="user_id" property="userId" jdbcType="VARCHAR"/>
            <result column="number" property="number" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        id,user_name,sex,password,realname,age
    </sql>

    <resultMap id="BaseResultMap" type="com.jiangcheng.bean.User">
        <!--
            id:指定查询列表唯一标识，如果有多个唯一标识，则配置多个id
            column:数据库对应的列
            property:实体类对应的属性名
          -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="realname" property="realname" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- 根据id查询 user 表数据 -->
    <select id="selectUserById"  resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List" />
        from t_user where id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 根据id查询 user 表数据 -->
    <select id="selectUserAll"  resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from t_user
    </select>

    <!-- 向t_user表插入一条数据 -->
    <insert id="selectUser"  parameterType="com.jiangcheng.bean.User">
        insert into
        t_user(<include refid="Base_Column_List" />)
        value(#{id,jdbcType=INTEGER},#{username,jdbcType=VARCHAR},#{age,jdbcType=INTEGER})
    </insert>
</mapper>